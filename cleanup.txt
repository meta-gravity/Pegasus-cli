// func showUpdate(cmd *cobra.Command, args []string) {
// 	// Implement the update logic here
// 	fmt.Println("Updating Pegasus CLI...")
// 	// Add the actual update logic here
// }

// still working on this part 
// func showUpdate(cmd *cobra.Command, args []string) {
// 	// Step 1: Retrieve the latest release version from GitHub
// 	latestVersion, err := getLatestReleaseVersion()
// 	if err != nil {
// 		fmt.Println("Failed to retrieve the latest release version:", err)
// 		return
// 	}

// 	// Step 2: Compare the latest version with the current version
// 	if latestVersion == version {
// 		fmt.Println("Your CLI is already up to date.")
// 		return
// 	}

// 	// Step 3: Download the new release binary from GitHub
// 	downloadURL := fmt.Sprintf("https://github.com/YOUR_USERNAME/YOUR_REPOSITORY/releases/download/%s/pegasus.exe", latestVersion)
// 	resp, err := http.Get(downloadURL)
// 	if err != nil {
// 		fmt.Println("Failed to download the update:", err)
// 		return
// 	}
// 	defer resp.Body.Close()

// 	// Step 4: Replace the old binary with the new one
// 	updatePath := "bin/pegasus.exe" // The path where the new binary will be saved
// 	out, err := os.Create(updatePath)
// 	if err != nil {
// 		fmt.Println("Failed to create the update file:", err)
// 		return
// 	}
// 	defer out.Close()

// 	_, err = io.Copy(out, resp.Body)
// 	if err != nil {
// 		fmt.Println("Failed to save the update file:", err)
// 		return
// 	}

// 	fmt.Println("Pegasus CLI has been updated to the latest version.")
// }


// import (
//     "fmt"
//     "github.com/spf13/cobra"
// )
// operations.go
package cmd

import (
	"fmt"
	"strconv"
	"github.com/spf13/cobra"
	"os"


	
	"github.com/meta-gravity/Pegasus/cmd" // Change "meta-gravity" to your GitHub username
)

func main() {
	fmt.Println("Pegasus CLI")
	fmt.Println("---------------------------------")
	cmd.Execute()
}

func init() {
	rootCmd.AddCommand(addCmd)
	rootCmd.AddCommand(subtractCmd)
}

var rootCmd = &cobra.Command{
	Use:   "Pegasus",
	Short: "A simple CLI tool for Pegasus",
}

var addCmd = &cobra.Command{
	Use:   "add",
	Short: "Add two numbers",
	Run: func(cmd *cobra.Command, args []string) {
		if len(args) != 2 {
			fmt.Println("Usage: pegasus add <num1> <num2>")
			return
		}

		// Convert the arguments to numbers
		num1 := parseNumber(args[0])
		num2 := parseNumber(args[1])

		// Perform the addition
		result := num1 + num2
		fmt.Printf("Result: %d\n", result)
	},
}

var subtractCmd = &cobra.Command{
	Use:   "subtract",
	Short: "Subtract two numbers",
	Run: func(cmd *cobra.Command, args []string) {
		if len(args) != 2 {
			fmt.Println("Usage: pegasus subtract <num1> <num2>")
			return
		}

		// Convert the arguments to numbers
		num1 := parseNumber(args[0])
		num2 := parseNumber(args[1])

		// Perform the subtraction
		result := num1 - num2
		fmt.Printf("Result: %d\n", result)
	},
}

func parseNumber(s string) int {
	num, err := strconv.Atoi(s)
	if err != nil {
		fmt.Println("Error: Invalid number format")
		os.Exit(1)
	}
	return num
}